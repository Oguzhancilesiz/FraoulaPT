@using FraoulaPT.WebUI.Areas.Admin.Models.ViewModels._Shared
@using FraoulaPT.Core.Enums
@using FraoulaPT.DTOs.ExtraPackageOptionDTOs
@using System.Globalization
@model List<ExtraPackageOptionListDTO>

@{
    ViewData["Title"] = "Ek Paket Seçenekleri";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var header = new PageHeaderVM
            {
                Title = "Ek Paket Seçenekleri",
                Subtitle = "Satın alınabilir ek kullanım haklarını yönetin",
                Breadcrumbs = new(){
            new(){ Text = "Dashboard", Url = Url.Action("Index","Dashboard", new{ area="Admin" }) },
            new(){ Text = "Ek Paketler" }
        },
                Buttons = new(){
            new(){ Text="Yeni Ekle", Url=Url.Action("Create","ExtraPackageOption", new{ area="Admin"}), Icon="bi-plus-circle", ColorClass="btn-brand" }
        }
            };
}

@await Html.PartialAsync("AdminPartials/_PageHeader", header)

<div class="container-fluid">
    <div class="card ring shadow-soft">
        <div class="card-body p-3 p-md-4">

            @if (Model == null || !Model.Any())
            {
                <div class="alert alert-info mb-0">Henüz ek paket seçeneği eklenmemiş.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead>
                            <tr class="small text-muted">
                                <th class="text-nowrap">#</th>
                                <th>Ad</th>
                                <th class="d-none d-sm-table-cell">Tür</th>
                                <th class="d-none d-md-table-cell">Adet</th>
                                <th>Fiyat</th>
                                <th>Durum</th>
                                <th style="width:160px;" class="text-nowrap">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.Count; i++)
                            {
                                var item = Model[i];
                                <tr data-id="@item.Id">
                                    <td class="text-muted">@(@i + 1)</td>
                                    <td class="fw-semibold">@item.Name</td>
                                    <td class="d-none d-sm-table-cell">
                                        <span class="badge text-bg-secondary">@item.Type</span>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        <span class="badge text-bg-info">@item.Amount</span>
                                    </td>
                                    <td>
                                        <span class="fw-semibold">@($"{item.Price:N2} ₺")</span>
                                    </td>
                                    <td>
                                        @if (item.IsActive)
                                        {
                                            <span class="badge text-bg-success">Aktif</span>
                                        }
                                        else
                                        {
                                            <span class="badge text-bg-secondary">Pasif</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-1">
                                            <button type="button"
                                                    class="btn btn-sm @(item.IsActive ? "btn-outline-danger" : "btn-outline-success") toggle-status-btn"
                                                    title="Durumu Değiştir">
                                                <i class="bi @(item.IsActive ? "bi-eye-slash" : "bi-eye")"></i>
                                                <span class="d-none d-xl-inline ms-1">@(item.IsActive ? "Pasifleştir" : "Aktifleştir")</span>
                                            </button>

                                            <a asp-area="Admin" asp-controller="ExtraPackageOption" asp-action="Edit" asp-route-id="@item.Id"
                                               class="btn btn-sm btn-warning" title="Düzenle">
                                                <i class="bi bi-pencil"></i><span class="d-none d-xl-inline ms-1">Düzenle</span>
                                            </a>

                                            <button type="button" class="btn btn-sm btn-outline-danger delete-btn" title="Sil">
                                                <i class="bi bi-trash"></i><span class="d-none d-xl-inline ms-1">Sil</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@* Anti-forgery token’ı JS’in okuyabilmesi için küçük, görünmez bir form *@
<form id="__af" asp-antiforgery="true" class="d-none"></form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        (function(){
          const token = document.querySelector('#__af input[name="__RequestVerificationToken"]')?.value;

          // Durum değiştir
          document.querySelectorAll('.toggle-status-btn').forEach(btn=>{
            btn.addEventListener('click', async (e)=>{
              const tr = e.currentTarget.closest('tr');
              const id = tr?.getAttribute('data-id');
              if(!id) return;

              const ask = await Swal.fire({
                title: 'Durumu değiştirmek istiyor musunuz?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Evet',
                cancelButtonText: 'İptal'
              });
              if(!ask.isConfirmed) return;

              try{
                const res = await fetch('/Admin/ExtraPackageOption/ToggleActive', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token ?? ''
                  },
                  body: JSON.stringify({ Id: id })
                });
                const data = await res.json();
                if(data?.success){
                  await Swal.fire('Başarılı','Durum güncellendi.','success');
                  location.reload();
                }else{
                  throw new Error(data?.message || 'Durum güncellenemedi.');
                }
              }catch(err){
                Swal.fire('Hata', err.message || 'İşlem başarısız.', 'error');
              }
            });
          });

          // Sil
          document.querySelectorAll('.delete-btn').forEach(btn=>{
            btn.addEventListener('click', async (e)=>{
              const tr = e.currentTarget.closest('tr');
              const id = tr?.getAttribute('data-id');
              if(!id) return;

              const ask = await Swal.fire({
                title: 'Silmek istediğinize emin misiniz?',
                text: 'Bu işlem geri alınamaz.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Evet, sil',
                cancelButtonText: 'İptal'
              });
              if(!ask.isConfirmed) return;

              try{
                const res = await fetch(`/Admin/ExtraPackageOption/Delete/${id}`, {
                  method: 'POST',
                  headers: { 'RequestVerificationToken': token ?? '' }
                });
                const data = await res.json();
                if(data?.success){
                  await Swal.fire('Silindi', data?.message || 'Kayıt başarıyla silindi.', 'success');
                  location.reload();
                }else{
                  throw new Error(data?.message || 'Silme işlemi başarısız.');
                }
              }catch(err){
                Swal.fire('Hata', err.message || 'İşlem başarısız.', 'error');
              }
            });
          });
        })();
    </script>
}
