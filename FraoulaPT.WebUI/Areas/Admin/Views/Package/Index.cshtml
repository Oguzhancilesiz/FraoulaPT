@using FraoulaPT.Core.Enums
@using FraoulaPT.DTOs.PackageDTOs
@using FraoulaPT.WebUI.Areas.Admin.Models.ViewModels._Shared
@model List<PackageListDTO>

@{
    ViewData["Title"] = "Paketler";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var header = new PageHeaderVM
            {
                Title = "Paketler",
                Subtitle = "Paketleri görüntüle, filtrele ve yönet",
                Breadcrumbs = new(){
            new(){ Text="Dashboard", Url=Url.Action("Index","Dashboard", new{ area="Admin" }) },
            new(){ Text="Paketler" }
        },
                Buttons = new(){
            new(){ Text="Yeni Paket Ekle", Url=Url.Action("Create","Package", new{ area="Admin"}), Icon="bi-plus-circle", ColorClass="btn-brand" }
        }
            };
}

@await Html.PartialAsync("AdminPartials/_PageHeader", header)

<div class="container-fluid">

    <!-- Filtre / Arama -->
    <div class="card ring mb-3">
        <div class="card-body">
            <div class="row g-2 align-items-end">
                <div class="col-12 col-md-6">
                    <label class="form-label small text-muted">Ara</label>
                    <div class="input-group input-group-sm">
                        <span class="input-group-text bg-transparent border-secondary"><i class="bi bi-search"></i></span>
                        <input id="searchInput" class="form-control bg-transparent border-secondary text-light" placeholder="Paket adına göre ara…">
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <label class="form-label small text-muted">Durum</label>
                    <select id="statusFilter" class="form-select form-select-sm bg-transparent border-secondary text-light">
                        <option value="">Hepsi</option>
                        <option value="Aktif">Aktif</option>
                        <option value="Pasif">Pasif</option>
                    </select>
                </div>
                <div class="col-6 col-md-3 d-flex gap-2">
                    <button id="btnClearFilters" class="btn btn-sm btn-outline-secondary mt-4 mt-md-0"><i class="bi bi-x-circle"></i> Temizle</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Liste -->
    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info">Henüz paket eklenmemiş.</div>
    }
    else
    {
        <div class="card ring">
            <div class="table-responsive">
                <table class="table align-middle table-hover mb-0" id="pkgTable">
                    <thead>
                        <tr class="small text-muted">
                            <th class="text-nowrap">#</th>
                            <th>Ad</th>
                            <th class="d-none d-md-table-cell">Tip</th>
                            <th class="d-none d-md-table-cell">Süre</th>
                            <th>Fiyat</th>
                            <th class="d-none d-lg-table-cell">Soru / Mesaj</th>
                            <th>Durum</th>
                            <th style="min-width:170px;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            var item = Model[i];
                            var rowNo = i + 1;
                            <tr data-name="@item.Name" data-status="@(item.IsActive ? "Aktif" : "Pasif")">
                                <td class="text-muted">@rowNo</td>
                                <td class="fw-semibold">@item.Name</td>
                                <td class="d-none d-md-table-cell">
                                    <span class="badge text-bg-secondary">@item.PackageType</span>
                                </td>
                                <td class="d-none d-md-table-cell">@item.SubscriptionPeriod</td>
                                <td>@($"{item.Price:N2} ₺")</td>
                                <td class="d-none d-lg-table-cell">@item.MaxQuestionsPerPeriod / @item.MaxMessagesPerPeriod</td>
                                <td>
                                    <span class="badge @(item.IsActive ? "text-bg-success" : "text-bg-secondary") status-badge">
                                        @(item.IsActive ? "Aktif" : "Pasif")
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex flex-wrap gap-1">
                                        <button class="btn btn-sm @(item.IsActive ? "btn-danger" : "btn-success") toggle-status-btn"
                                                data-id="@item.Id" title="Durum Değiştir" data-bs-toggle="tooltip">
                                            <i class="bi @(item.IsActive ? "bi-eye-slash" : "bi-eye")"></i>
                                        </button>

                                        <a asp-area="Admin" asp-controller="Package" asp-action="Edit" asp-route-id="@item.Id"
                                           class="btn btn-sm btn-warning" title="Düzenle" data-bs-toggle="tooltip">
                                            <i class="bi bi-pencil"></i>
                                        </a>

                                        <button class="btn btn-sm btn-outline-danger delete-btn"
                                                data-id="@item.Id" title="Sil" data-bs-toggle="tooltip">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        (function(){
          const $  = (s,r=document)=>r.querySelector(s);
          const $$ = (s,r=document)=>Array.from(r.querySelectorAll(s));

          const table = $("#pkgTable");
          const search = $("#searchInput");
          const statusSel = $("#statusFilter");
          const clearBtn = $("#btnClearFilters");

          // Basit istemci tarafı filtre
          function applyFilter(){
            const q = (search?.value || "").toLowerCase();
            const st= statusSel?.value || "";
            $$("#pkgTable tbody tr").forEach(tr=>{
              const name = (tr.dataset.name||"").toLowerCase();
              const status = tr.dataset.status||"";
              const okName = !q || name.includes(q);
              const okSt   = !st || status === st;
              tr.style.display = (okName && okSt) ? "" : "none";
            });
          }
          search?.addEventListener("input", applyFilter);
          statusSel?.addEventListener("change", applyFilter);
          clearBtn?.addEventListener("click", ()=>{
            if(search) search.value="";
            if(statusSel) statusSel.value="";
            applyFilter();
          });

          // Durum değiştir
          $$(".toggle-status-btn").forEach(btn=>{
            btn.addEventListener("click", async ()=>{
              const id = btn.getAttribute("data-id");
              const tr = btn.closest("tr");
              const badge = tr?.querySelector(".status-badge");

              const confirmed = await Swal.fire({
                title: 'Emin misiniz?',
                text: 'Durumu değiştirmek istiyor musunuz?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Evet, değiştir',
                cancelButtonText: 'İptal',
                reverseButtons: true
              });
              if(!confirmed.isConfirmed) return;

              try{
                const res = await fetch('/Admin/Package/ToggleStatus', {
                  method:'POST',
                  headers:{'Content-Type':'application/json'},
                  body: JSON.stringify({ Id:id })
                });
                const data = await res.json();
                if(data?.success){
                  // UI güncelle
                  const newSt = data.newStatus || (btn.classList.contains("btn-danger") ? "Pasif":"Aktif");
                  tr.dataset.status = newSt;
                  if(badge){
                    badge.classList.toggle("text-bg-success", newSt==="Aktif");
                    badge.classList.toggle("text-bg-secondary", newSt!=="Aktif");
                    badge.textContent = newSt;
                  }
                  if(newSt==="Aktif"){
                    btn.classList.remove("btn-success"); btn.classList.add("btn-danger");
                    btn.innerHTML = '<i class="bi bi-eye-slash"></i>';
                  }else{
                    btn.classList.remove("btn-danger"); btn.classList.add("btn-success");
                    btn.innerHTML = '<i class="bi bi-eye"></i>';
                  }
                  applyFilter();
                  Swal.fire({ icon:'success', title:'Güncellendi', timer:1400, showConfirmButton:false });
                }else{
                  throw new Error(data?.message || 'Güncellenemedi');
                }
              }catch(err){
                console.warn(err);
                Swal.fire({ icon:'error', title:'Hata', text: err.message || 'İşlem başarısız' });
              }
            });
          });

          // Sil
          $$(".delete-btn").forEach(btn=>{
            btn.addEventListener("click", async ()=>{
              const id = btn.getAttribute("data-id");
              const ok = await Swal.fire({
                title:'Silinsin mi?',
                text:'Bu işlem geri alınamaz.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Evet, sil',
                cancelButtonText:'İptal'
              });
              if(!ok.isConfirmed) return;

              // Yönlendirme tabanlı silme (controller'ın mevcut davranışına uygun)
              window.location.href = `/Admin/Package/Delete/${id}`;
            });
          });

          // Tooltip
          const tips = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
          tips.forEach(el => new bootstrap.Tooltip(el));

        })();
    </script>
}
