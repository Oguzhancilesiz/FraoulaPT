@model List<FraoulaPT.DTOs.UserQuestionDTOs.UserQuestionDTO>
@{
    ViewData["Title"] = "Tüm Sorularım";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var list = Model ?? new List<FraoulaPT.DTOs.UserQuestionDTOs.UserQuestionDTO>();

    DateTime sortKey(FraoulaPT.DTOs.UserQuestionDTOs.UserQuestionDTO q) => (q.AnsweredAt ?? q.AskedAt);
    bool answered(FraoulaPT.DTOs.UserQuestionDTOs.UserQuestionDTO q) => !string.IsNullOrWhiteSpace(q.AnswerText);

    var sorted = list
        .OrderByDescending(q => answered(q))       // cevaplı önce
        .ThenByDescending(sortKey)                 // sonra tarihe göre
        .ToList();

    var totalCount = sorted.Count;
    var answeredCount = sorted.Count(q => answered(q));
    var unansweredCount = totalCount - answeredCount;
}

<h2 class="mb-4 text-warning fw-bold">
    <i class="bi bi-chat-left-text-fill me-2"></i>Tüm Sorularım
</h2>

@if (totalCount == 0)
{
    <div class="alert alert-warning text-center shadow-sm border-0">
        <i class="bi bi-info-circle-fill me-1"></i> Henüz bir soru sormadınız.
    </div>
}
else
{
    <style>
        .q-card {
            background: var(--surface);
            color: var(--text);
            border: 1px solid var(--border);
            border-radius: 12px;
        }

        .clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .filter-btns .btn.active {
            background: var(--brand-grad);
            border: 0;
            color: #fff;
        }

        .search-input {
            max-width: 420px;
        }
    </style>

    <!-- Filtre + Arama -->
    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-2 mb-3">
        <div class="btn-group filter-btns" role="group" aria-label="Filtre">
            <button type="button" class="btn btn-outline-light active" data-filter="all">
                Tümü (<span id="count-all">@totalCount</span>)
            </button>
            <button type="button" class="btn btn-outline-success" data-filter="answered">
                Cevaplananlar (<span id="count-answered">@answeredCount</span>)
            </button>
            <button type="button" class="btn btn-outline-warning" data-filter="unanswered">
                Cevaplanmayanlar (<span id="count-unanswered">@unansweredCount</span>)
            </button>
        </div>

        <div class="input-group search-input">
            <span class="input-group-text bg-dark text-light border-secondary"><i class="bi bi-search"></i></span>
            <input id="searchBox" type="text" class="form-control bg-dark text-light border-secondary"
                   placeholder="Sorularda ara...">
        </div>
    </div>

    <!-- Kart Grid -->
    <div id="questionList" class="row">
        @foreach (var q in sorted)
        {
            var isAnswered = answered(q);
            var askedTxt = q.AskedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm");
            var ansTxt = q.AnsweredAt?.ToLocalTime().ToString("dd.MM.yyyy HH:mm");
            var coach = string.IsNullOrWhiteSpace(q.CoachName) ? "Bilinmiyor" : q.CoachName;

            <div class="col-12 col-md-6 col-lg-4 mb-3 question-item @(isAnswered ? "answered" : "unanswered")">
                <div class="card q-card h-100 shadow-sm border-0 position-relative">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex align-items-center justify-content-between mb-2">
                            <span class="badge @(isAnswered ? "bg-success" : "bg-warning text-dark")">
                                @(isAnswered ? "Yanıtlandı" : "Yanıt Bekliyor")
                            </span>
                            <small class="text-muted">
                                <i class="bi bi-calendar-event me-1"></i>@askedTxt
                            </small>
                        </div>

                        <h6 class="card-title fw-bold text-warning clamp-2">
                            <i class="bi bi-question-circle me-1"></i>@q.QuestionText
                        </h6>

                        @if (isAnswered)
                        {
                            <div class="mt-1">
                                <div class="text-success fw-semibold mb-1">
                                    <i class="bi bi-check-circle-fill me-1"></i>Cevap
                                </div>
                                <div class="text-light clamp-3">@q.AnswerText</div>
                                <div class="text-muted small mt-2">
                                    <i class="bi bi-person-badge me-1"></i> Yanıtlayan: @coach
                                    @if (!string.IsNullOrWhiteSpace(ansTxt))
                                    {
                                        <span class="ms-2"><i class="bi bi-clock-history me-1"></i>@ansTxt</span>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <span class="badge bg-secondary mt-1"><i class="bi bi-hourglass-split me-1"></i> Beklemede</span>
                        }

                        <!-- Kartı tıklanabilir yap -->
                        <a href="@Url.Action("QuestionDetail", "Support", new { id = q.QuestionId })" class="stretched-link"></a>
                    </div>
                </div>
            </div>
        }
    </div>

    @section Scripts {
        <script>
            (function(){
              const buttons   = document.querySelectorAll('[data-filter]');
              const items     = document.querySelectorAll('.question-item');
              const searchBox = document.getElementById('searchBox');

              function applyFilters() {
                const activeBtn = document.querySelector('[data-filter].active');
                const filter    = activeBtn ? activeBtn.getAttribute('data-filter') : 'all';
                const query     = (searchBox?.value || '').toLowerCase().trim();

                let cAll=0, cAns=0, cUn=0;

                items.forEach(it => {
                  const isAns  = it.classList.contains('answered');
                  const text   = it.innerText.toLowerCase();

                  const passFilter = (filter === 'all')
                                  || (filter === 'answered'   && isAns)
                                  || (filter === 'unanswered' && !isAns);

                  const passSearch = !query || text.includes(query);

                  const show = passFilter && passSearch;
                  it.classList.toggle('d-none', !show);

                  if (show) {
                    cAll++;
                    if (isAns) cAns++; else cUn++;
                  }
                });

                // Sayaçları güncelle (aktif görünüme göre)
                document.getElementById('count-all').textContent        = cAll;
                document.getElementById('count-answered').textContent   = cAns;
                document.getElementById('count-unanswered').textContent = cUn;
              }

              // Filtre butonları
              buttons.forEach(b=>{
                b.addEventListener('click', ()=>{
                  buttons.forEach(x=>x.classList.remove('active'));
                  b.classList.add('active');
                  applyFilters();
                });
              });

              // Arama
              searchBox?.addEventListener('input', applyFilters);

              // ilk render
              applyFilters();
            })();
        </script>
    }
}
